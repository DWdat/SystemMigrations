<?php

/**
 * This module is responsible for repeating changes to Fields and Templates.
 */
class SystemMigrationsAdmin extends Process
{
    const PAGE_NAME = 'migrations';

    /**
     * @var string path to data files
     * @see init()
     */
    protected $data_path;

    /**
     * @return array module information
     */
    public static function getModuleInfo()
    {
        return array(
            'title'      => 'Migrations Admin',
            'author'     => 'Rasmus Schultz',
            'version'    => 100,
            'summary'    => 'Administration module for Migrations.',
            'permission' => 'template-admin',
            'requires'   => array('SystemMigrations'),
        );
    }

    /**
     * Method to initialize the module.
     *
     * This is called after ProcessWire's API is fully ready for use and hooks. It is called at the end of the
     * bootstrap process. This is before PW has started retrieving or rendering a page. If you need to have the
     * API ready with the $page ready as well, then see the ready() method below this one.
     */
    public function init()
    {
        $this->data_path = $this->getModule()->data_path;
    }

    /**
     * Display migration status
     */
    public function ___execute()
    {
        /**
         * @var InputfieldWrapper $fields
         */

        $fields = new InputfieldWrapper();

        $html = "<h2>Pending Migrations</h2>\n";

        $first = true;

        $count = 0; $max = 100;

        $fast_forward = true;

        foreach ($this->getMigrations() as $filename => $remaining) {
            if ($fast_forward && $remaining === 0) {
                continue; // fast foward past already installed migrations
            } else {
                $fast_forward = false;
            }

            if (++$count > $max) {
                $html .= "<pre>  More than $max pending migrations in the registry...</pre>\n";
                break;
            }

            $commands = $this->loadCommands($filename);

            $first_index = count($commands) - $remaining;

            foreach ($commands as $index => $command) {
                $pending = $index >= $first_index;

                $html .= "<pre>" . ($pending ? '  ' : '* ')
                    . htmlspecialchars($filename) . ' [' . (1 + $index) . '] '
                    . htmlspecialchars($this->describeCommand($command));

                if ($pending && $first) {
                    $first = false;

                    $status = $this->canApplyCommand($commands[count($commands) - $remaining]);

                    $html .= " <- " . ($status === true ? "READY" : $status);
                }

                $html .= "</pre>\n";
            }
        }

        if (!$first) {
            $html .= '<h3><a style="border:solid 1px black;border-radius:8px;padding:8px;" href="./apply" onclick="return confirm(\'Apply pending Migrations now?\');"><span>Apply Migrations</span></a></h3>';
        } else {
            $html .= '<h3>Your Fields &amp; Templates are up to date.</h3>';
        }

        $markup = wire('modules')->get('InputfieldMarkup');
        $markup->markupText = $html;

        $fields->append($markup);

        return $fields->render();
    }

    /**
     * @return SystemMigrations
     */
    protected function getModule()
    {
        return wire('modules')->get('SystemMigrations');
    }

    /**
     * Apply migrations
     */
    public function ___executeApply()
    {
        /**
         * @var SystemMigrations $module
         */

        $module = $this->getModule();

        $module->recording = false; // disable recording while we apply pending changes

        $html = '<h2>Apply Migrations</h2>';

        foreach ($this->getMigrations() as $filename => $remaining) {
            if ($remaining > 0) {
                $commands = $this->loadCommands($filename);

                $total = count($commands);

                for ($index = $total - $remaining; $index < $total; $index++) {
                    $command = $commands[$index];

                    $status = $this->canApplyCommand($command);

                    if ($status === true) {
                        $html .= '<pre>Applying '
                            . $filename . ' [' . (1 + $index) . ']: '
                            . $this->describeCommand($command) . '</pre>';

                        call_user_func_array(array($this, $command['method']), $command['params']);

                        $module->recordAppliedMigration($filename, $total - 1 - $index);
                    } else {
                        $html .= '<pre>Aborted ' . $filename . ' : ' . htmlspecialchars($status) . '</pre>';

                        break 2; // break out of the for and foreach loops
                    }
                }

            }
        }

        return $html;
    }

    /**
     * Install the setup menu shortcut
     */
    public function ___install()
    {
        $page = new Page();

        $page->template = 'admin';

        $page->title = 'Migrations';
        $page->name = self::PAGE_NAME;
        $page->parent = $this->pages->get($this->config->adminRootPageID)->child('name=setup');

        $page->process = $this;

        $page->save();
    }

    /**
     * Remove the setup menu shortcut
     */
    public function ___uninstall()
    {
        $moduleID = $this->modules->getModuleID($this);

        $page = $this->pages->get("template=admin, process=$moduleID, name=" . self::PAGE_NAME);

        if ($page->id) {
            $page->delete();
        }
    }

    /**
     * @return ArrayObject|int[] map where filename => remaining number of commands not yet applied
     */
    public function getMigrations()
    {
        return $this->getModule()->getMigrations();
    }

    /**
     * Load commands from a JSON migration file
     *
     * @param string $filename
     *
     * @return array
     */
    protected function loadCommands($filename)
    {
        return json_decode(file_get_contents($this->data_path . DIRECTORY_SEPARATOR . $filename), true);
    }

    /**
     * @param array $command
     *
     * @return string a description of the migration contained in the given migration file
     */
    public function describeCommand($command)
    {
        $strings = array();

        foreach ($command['params'] as $name => $value) {
            $strings[] = is_scalar($value)
                ? $name . ':' . strval($value)
                : $name;
        }

        return count($strings)
            ? $command['method'] . '(' . implode(', ', $strings) . ')'
            : $command['method'];
    }

    /**
     * @param array $command
     *
     * @return bool|string
     */
    public function canApplyCommand($command)
    {
        if (!is_array($command)) {
            return 'Invalid command';
        }

        $fn = 'can' . ucfirst($command['method']);

        if (! (method_exists($this, $fn) && method_exists($this, $command['method']))) {
            return 'Unsupported migration type: ' . $command['method'];
        }

        return call_user_func_array(array($this, $fn), $command['params']);
    }

    /**
     * @param string $name
     * @param array $updated
     * @param string[] $removed
     * @return bool|string true on success; or a string with an error-message
     *
     * @see SystemMigrations::hookFieldUpdated()
     */
    protected function canUpdateField($name, array $updated, array $removed)
    {
        if (! wire('fields')->has($name)) {
            return "Undefined Field: $name";
        }

        return true;
    }

    /**
     * Apply updates to a Field
     *
     * The name is the preferred way to find an existing Field, since the ID could
     * differ on another system. The name is the current name, before applying the
     * update - if the field's name has changed, the new name is in $data['name']
     *
     * @param string $name the (current) name of the Field
     * @param array $updated
     * @param string[] $removed
     * @internal param array $data new properties and settings for the Field
     *
     * @see SystemMigrations::hookFieldUpdated()
     */
    protected function updateField($name, array $updated, array $removed)
    {
        /**
         * @var Field $field
         */

        $field = wire('fields')->get($name);

        foreach ($updated as $name => $value) {
            $field->$name = $value;
        }

        foreach ($removed as $name) {
            unset($field->$name);
        }

        $field->save();
    }

    /**
     * @param string $name
     * @param string $type
     * @param array $data
     * @return bool|string true on success; or a string with an error-message
     *
     * @see SystemMigrations::hookFieldAdded()
     */
    protected function canAddField($name, $type, array $data)
    {
        if (wire('fields')->has($name)) {
            return "Field already exists: $name";
        }

        return true;
    }

    /**
     * Adds a new Field
     *
     * @param string $name the name of the new Field
     * @param string $type the Field type (class) name
     * @param array $data new properties and settings for the Field
     *
     * @see SystemMigrations::hookFieldAdded()
     */
    protected function addField($name, $type, array $data)
    {
        /**
         * @var Fields $fields
         */

        $fields = wire('fields');

        $field = new Field();
        $field->setName($name);
        $field->setFieldtype($type);

        foreach ($data as $name => $value) {
            $field->$name = $value;
        }

        $field->save();
    }

    /**
     * @param string $name
     * @return bool|string true on success; or a string with an error-message
     *
     * @see SystemMigrations::hookFieldDeleted()
     */
    protected function canDeleteField($name)
    {
        if (! wire('fields')->has($name)) {
            return "Undefined Field: $name"; // TODO QA: is it necessary to consider this an error?
        }

        return true;
    }

    /**
     * Deletes an existing Field
     *
     * @param string $name the name of the deleted Field
     *
     * @see SystemMigrations::hookFieldDeleted()
     */
    protected function deleteField($name)
    {
        /**
         * @var Field $field
         */

        $field = wire('fields')->get($name);

        wire('fields')->delete($field);
    }

    /**
     * @param string $name
     * @param string $type
     * @return bool|string true on success; or a string with an error-message
     */
    protected function canChangeFieldType($name, $type)
    {
        /**
         * @var Field $field
         */

        $field = wire('fields')->get($name);

        if ($field === null) {
            return "Undefined Field: $name";
        }

        if (! wire('fieldtypes')->has($type)) {
            return "Unknown FieldType: $type";
        }

        // note that all we can do to assert this is going to work, is check that
        // the Field and FieldType exists - whether or not changing the FieldType
        // succeeds is not known until attempted.

        return true;
    }

    /**
     * Changes the type of an existing field
     *
     * @param string $name
     * @param string $type
     */
    protected function changeFieldType($name, $type)
    {
        /**
         * @var Field $field
         */

        $field = wire('fields')->get($name);

        $field->setFieldtype($type);

        $field->save();
    }

    /**
     * @param string $name
     * @param string $fieldgroup_name
     * @param array $data
     *
     * @return bool|string
     */
    protected function canAddTemplate($name, $fieldgroup_name, array $data)
    {
        if (wire('templates')->has($name)) {
            return "Template already exists: $name";
        }

        return true;
    }

    /**
     * @param string $name
     * @param string $fieldgroup_name
     * @param array $data
     *
     * @see SystemMigrations::hookTemplateAdded()
     */
    protected function addTemplate($name, $fieldgroup_name, array $data)
    {
        /**
         * @var Fields $templates
         * @var Fieldgroup $fieldgroup
         */

        $template = new Template();

        $template->name = $name;

        $fieldgroup = wire('fieldgroups')->get($fieldgroup_name);

        $template->setFieldgroup($fieldgroup);

        foreach ($data as $name => $value) {
            $template->$name = $value;
        }

        $template->save();
    }

    /**
     * @param string $name
     * @param array $updated
     * @param string[] $removed
     * @return bool|string
     *
     * @see SystemMigrations::hookTemplateSaved()
     */
    protected function canUpdateTemplate($name, array $updated, array $removed)
    {
        if (wire('templates')->has($name)) {
            return true;
        }

        return "Template does not exist: $name";
    }

    /**
     * Updates an existing Template.
     *
     * @param string $name
     * @param array $updated
     * @param string[] $removed
     *
     * @see SystemMigrations::hookTemplateSaved()
     */
    protected function updateTemplate($name, array $updated, array $removed)
    {
        /**
         * @var Template $template
         */

        $template = wire('templates')->get(name);

        foreach ($updated as $name => $value) {
            $template->$name = $value;
        }

        foreach ($removed as $name) {
            unset($template->$name);
        }

        $template->save();
    }

    /**
     * @param string $name
     *
     * @return bool|string
     *
     * @see SystemMigrations::hookTemplateDeleted()
     */
    protected function canDeleteTemplate($name)
    {
        if (! wire('templates')->has($name)) {
            return "Undefined Template: $name"; // TODO QA: is it necessary to consider this an error?
        }

        return true;
    }

    /**
     * Deletes an existing Template
     *
     * @param string $name
     *
     * @see SystemMigrations::hookTemplateDeleted()
     */
    protected function deleteTemplate($name)
    {
        /**
         * @var Template $template
         */

        $template = wire('templates')->get($name);

        wire('templates')->delete($template);
    }

    /**
     * @param string $name
     * @param array  $updated
     *
     * @return bool|string
     *
     * @see SystemMigrations::hookFieldgroupSaved()
     */
    protected function canUpdateGroup($name, $updated)
    {
        if (! wire('fieldgroups')->has($name)) {
            return "Undefined Fieldgroup: $name";
        }

        return true;
    }

    /**
     * @param string $name
     * @param array $updated
     *
     * @see SystemMigrations::hookFieldgroupSaved()
     */
    protected function updateGroup($name, $updated)
    {
        /**
         * @var Fieldgroup $group
         */

        $group = wire('fieldgroups')->get($name);

        $this->_updateGroup($group, $updated);
    }

    /**
     * @param Fieldgroup $group
     * @param array $data
     */
    protected function _updateGroup(Fieldgroup $group, $data)
    {
        if (isset($data['name'])) {
            $group->name = $data['name'];
        }

        if (isset($data['order'])) {
            foreach ($data['order'] as $name) {
                $field = $group->getField($name, true) ?: wire('fields')->get($name);

                $group->append($field); // appending items to a WireArray will re-order items (won't create duplicates)
            }
        }

        $group->save();
    }

    /**
     * @param string $name
     * @param array $data
     *
     * @return bool|string
     */
    protected function canAddGroup($name, $data)
    {
        if (wire('fieldgroups')->has($name)) {
            return "Fieldgroup already exists: $name";
        }

        return true;
    }

    /**
     * @param string $name
     * @param array $data
     */
    protected function addGroup($name, $data)
    {
        $group = new Fieldgroup();

        $this->_updateGroup($group, $data);
    }

    /**
     * @param string $name
     *
     * @return bool|string
     */
    protected function canDeleteGroup($name)
    {
        if (! wire('fieldgroups')->has($name)) {
            return "Undefined Template: $name"; // TODO QA: is it necessary to consider this an error?
        }

        return true;
    }

    /**
     * @param string $name
     */
    protected function deleteGroup($name)
    {
        /**
         * @var Fieldgroup $group
         */

        $group = wire('fieldgroups')->get($name);

        wire('fieldgroups')->delete($group);
    }

    /**
     * @param string $name
     * @param array $updated
     * @param array $removed
     *
     * @return bool|string
     *
     * @see SystemMigrations::hookFieldgroupContextSaved()
     */
    protected function canUpdateGroupContext($name, $updated, $removed)
    {
        /**
         * @var Fieldgroup $group
         * @var Field $field
         */

        if (! wire('fieldgroups')->has($name)) {
            return "Missing Fieldgroup: $name";
        }

        return true;
    }

    /**
     * @param string $name
     * @param array $updated
     * @param array $removed
     *
     * @see SystemMigrations::hookFieldgroupContextSaved()
     */
    protected function updateGroupContext($name, $updated, $removed)
    {
        /**
         * @var Fieldgroup $group
         * @var Field $field
         * @var Field[] $fields
         */

        $group = wire('fieldgroups')->get($name);

        $fields = array();

        foreach ($updated as $field_name => $values) {
            $field = $group->getField($field_name, true);

            foreach ($values as $name => $value) {
                $field->set($name, $value);
            }

            $fields[$field_name] = $field;
        }

        foreach ($removed as $field_name => $names) {
            $field = @$fields[$field_name] ?: $group->getField($field_name, true);

            $base_field = wire('fields')->get($field->id);

            foreach ($names as $name) {
                $field->set($name, $base_field->get($name));
            }

            $fields[$field_name] = $field;
        }

        foreach ($fields as $name => $field) {
            wire('fields')->saveFieldgroupContext($field, $group);
        }
    }
}
